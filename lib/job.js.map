{"version":3,"sources":["job.js"],"names":["Job","pool","thread","runArgs","sendArgs","emit","run","args","length","Error","send","executeOn","onProgress","onMessage","removeListener","onError","on","once","promise","Promise","resolve","abort","destroy","removeAllListeners","EventEmitter"],"mappings":";;;;AACA;;;;;;;;;;;;IAEqBA,G;;;AACnB,eAAYC,IAAZ,EAAkB;AAAA;;AAAA,iDAChB,wBADgB;;AAEhB,UAAKA,IAAL,GAAcA,IAAd;AACA,UAAKC,MAAL,GAAc,IAAd;;AAEA,UAAKC,OAAL,GAAe,EAAf;AACA,UAAKC,QAAL,GAAgB,EAAhB;;AAEAH,SAAKI,IAAL,CAAU,QAAV;AARgB;AASjB;;gBAEDC,G,kBAAa;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AACX,QAAIA,KAAKC,MAAL,KAAgB,CAApB,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,SAAKN,OAAL,GAAeI,IAAf;AACA,WAAO,IAAP;AACD,G;;gBAEDG,I,mBAAc;AACZ,QAAI,KAAKP,OAAL,CAAaK,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAHW,uCAANF,IAAM;AAANA,UAAM;AAAA;;AAKZ,SAAKH,QAAL,GAAgBG,IAAhB;;AAEA,SAAKF,IAAL,CAAU,YAAV;AACA,WAAO,IAAP;AACD,G;;gBAEDM,S,sBAAUT,M,EAAQ;AAAA;AAAA;AAAA;;AAChB,QAAMU,aAAa,SAAbA,UAAa;AAAA,yCAAIL,IAAJ;AAAIA,YAAJ;AAAA;;AAAA,aAAa,OAAKF,IAAL,gBAAU,UAAV,SAAyBE,IAAzB,EAAb;AAAA,KAAnB;AACA,QAAMM,YAAY,SAAZA,SAAY,GAAa;AAAA,yCAATN,IAAS;AAATA,YAAS;AAAA;;AAC7B,aAAKF,IAAL,gBAAU,MAAV,SAAqBE,IAArB;AACAL,aAAOY,cAAP,CAAsB,UAAtB,EAAkCF,UAAlC;AACAV,aAAOY,cAAP,CAAsB,OAAtB,EAA+BC,OAA/B;AACD,KAJD;AAKA,QAAMA,UAAU,SAAVA,OAAU,GAAa;AAAA,yCAATR,IAAS;AAATA,YAAS;AAAA;;AAC3B,aAAKF,IAAL,gBAAU,OAAV,SAAsBE,IAAtB;AACAL,aAAOY,cAAP,CAAsB,UAAtB,EAAkCF,UAAlC;AACAV,aAAOY,cAAP,CAAsB,MAAtB,EAA8BD,SAA9B;AACD,KAJD;;AAMA,4DACGG,EADH,CACM,UADN,EACkBJ,UADlB,EAEGK,IAFH,CAEQ,SAFR,EAEmBJ,SAFnB,EAGGI,IAHH,CAGQ,OAHR,EAGiBF,OAHjB,GAIGT,GAJH,6BAIU,KAAKH,OAJf,GAKGO,IALH,8BAKW,KAAKN,QALhB;;AAOA,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKG,IAAL,CAAU,eAAV;AACA,WAAO,IAAP;AACD,G;;gBAEDa,O,sBAAU;AAAA;;AACR;AACA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B;AACA,UAAI,CAAC,OAAKlB,MAAV,EAAkB;AAChB,eAAKe,IAAL,CAAU,eAAV,EAA2B,YAAM;AAC/BG,kBAAQ,OAAKlB,MAAL,CAAYgB,OAAZ,EAAR;AACD,SAFD;AAGD,OAJD,MAIO;AACLE,gBAAQ,OAAKlB,MAAL,CAAYgB,OAAZ,EAAR;AACD;AACF,KATM,CAAP;AAUD,G;;gBAEDG,K,oBAAQ;AACN,SAAKhB,IAAL,CAAU,OAAV;AACD,G;;gBAEDiB,O,sBAAW;AACT,SAAKC,kBAAL;AACA,WAAO,KAAKpB,OAAZ;AACA,WAAO,KAAKC,QAAZ;AACD,G;;;EA/E8BoB,sB;;kBAAZxB,G","file":"job.js","sourcesContent":["\r\nimport EventEmitter from 'eventemitter3';\r\n\r\nexport default class Job extends EventEmitter {\r\n  constructor(pool) {\r\n    super();\r\n    this.pool   = pool;\r\n    this.thread = null;\r\n\r\n    this.runArgs = [];\r\n    this.sendArgs = [];\r\n\r\n    pool.emit('newJob', this);\r\n  }\r\n\r\n  run(...args) {\r\n    if (args.length === 0) {\r\n      throw new Error('Cannot call .run() without arguments.');\r\n    }\r\n\r\n    this.runArgs = args;\r\n    return this;\r\n  }\r\n\r\n  send(...args) {\r\n    if (this.runArgs.length === 0) {\r\n      throw new Error('Cannot .send() before .run().');\r\n    }\r\n\r\n    this.sendArgs = args;\r\n\r\n    this.emit('readyToRun');\r\n    return this;\r\n  }\r\n\r\n  executeOn(thread) {\r\n    const onProgress = (...args) => this.emit('progress', ...args);\r\n    const onMessage = (...args) => {\r\n      this.emit('done', ...args);\r\n      thread.removeListener('progress', onProgress);\r\n      thread.removeListener('error', onError);\r\n    };\r\n    const onError = (...args) => {\r\n      this.emit('error', ...args);\r\n      thread.removeListener('progress', onProgress);\r\n      thread.removeListener('done', onMessage);\r\n    };\r\n\r\n    thread\r\n      .on('progress', onProgress)\r\n      .once('message', onMessage)\r\n      .once('error', onError)\r\n      .run(...this.runArgs)\r\n      .send(...this.sendArgs);\r\n\r\n    this.thread = thread;\r\n    this.emit('threadChanged');\r\n    return this;\r\n  }\r\n\r\n  promise() {\r\n    // Always return a promise\r\n    return new Promise((resolve) => {\r\n      // If the thread isn't set, listen for the threadChanged event\r\n      if (!this.thread) {\r\n        this.once('threadChanged', () => {\r\n          resolve(this.thread.promise());\r\n        });\r\n      } else {\r\n        resolve(this.thread.promise());\r\n      }\r\n    });\r\n  }\r\n\r\n  abort() {\r\n    this.emit('abort');\r\n  }\r\n\r\n  destroy () {\r\n    this.removeAllListeners();\r\n    delete this.runArgs;\r\n    delete this.sendArgs;\r\n  }\r\n}\r\n"]}
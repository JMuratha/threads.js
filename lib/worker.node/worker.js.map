{"version":3,"sources":["worker.node/worker.js"],"names":["lastPort","DEFAULT_PORT","buildExecArgv","process","execArgv","map","matches","arg","match","command","Number","resetPortCounter","Worker","initialRunnable","importScripts","options","slave","child","fork","path","join","__dirname","Object","assign","on","handleMessage","bind","handleError","emit","run","toRun","runMethod","runScript","method","send","initByMethod","toString","script","Error","prefixedScriptPath","basepath","node","initByScript","resolve","param","doRun","kill","promise","Promise","reject","resolved","rejected","result","removeListener","err","once","message","error","stack","progress","handleProgress","response","listeners","console","EventEmitter"],"mappings":"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","file":"worker.js","sourcesContent":["import child        from 'child_process';\r\nimport path         from 'path';\r\nimport EventEmitter from 'eventemitter3';\r\n\r\nimport { getConfig } from '../config';\r\n\r\n// Mutable variable with the last port used for inspect/inspect-brk.\r\n// This value is shared among all workers.\r\nlet lastPort = 0;\r\n\r\n// Port used by Node.JS when there is no port specified. See\r\n// https://nodejs.org/en/docs/inspector/#command-line-options\r\nconst DEFAULT_PORT = 9229;\r\nconst buildExecArgv = () => process.execArgv.map(arg => {\r\n  const matches = arg.match(/^(--inspect(?:-brk)?)(?:=(\\d+))?/);\r\n  if (!matches) return arg;\r\n\r\n  const command = matches[1];\r\n  if (lastPort === 0) lastPort = Number(matches[2]) || 9229;\r\n  lastPort++;\r\n  return `${command}=${lastPort}`\r\n});\r\n\r\n// This function will reset the counter of ports used for inspect/inspect-brk.\r\n// Used for testing.\r\nexport const resetPortCounter = () => {\r\n  lastPort = 0;\r\n}\r\n\r\nexport default class Worker extends EventEmitter {\r\n  constructor(initialRunnable, importScripts = [], options = {}) {\r\n    // `importScripts` cannot be consumed, it's just there to keep the API compatible to the browser worker\r\n    super();\r\n\r\n    this.slave = child.fork(path.join(__dirname, 'slave.js'), [], Object.assign(\r\n      { execArgv: buildExecArgv() },\r\n      options\r\n    ));\r\n    this.slave.on('message', this.handleMessage.bind(this));\r\n    this.slave.on('error', this.handleError.bind(this));\r\n    this.slave.on('exit', this.emit.bind(this, 'exit'));\r\n\r\n    if (initialRunnable) {\r\n      this.run(initialRunnable);\r\n    }\r\n  }\r\n\r\n  run(toRun) {\r\n    if (typeof toRun === 'function') {\r\n      this.runMethod(toRun);\r\n    } else {\r\n      this.runScript(toRun);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  runMethod(method) {\r\n    this.slave.send({\r\n      initByMethod : true,\r\n      method       : method.toString()\r\n    });\r\n  }\r\n\r\n  runScript(script) {\r\n    if (!script) { throw new Error('Must pass a function or a script path to run().'); }\r\n\r\n    const prefixedScriptPath = path.join(getConfig().basepath.node, script);\r\n\r\n    // attention: single script for node, array for browser\r\n    this.slave.send({\r\n      initByScript : true,\r\n      script       : path.resolve(prefixedScriptPath)\r\n    });\r\n  }\r\n\r\n  send(param) {\r\n    this.slave.send({\r\n      doRun : true,\r\n      param\r\n    });\r\n    return this;\r\n  }\r\n\r\n  kill() {\r\n    this.slave.kill();\r\n    return this;\r\n  }\r\n\r\n  promise() {\r\n    return new Promise((resolve, reject) => {\r\n      let resolved, rejected;\r\n      resolved = (result) => {\r\n        this.removeListener('error', rejected);\r\n        resolve(result);\r\n      };\r\n      rejected = (err) => {\r\n        this.removeListener('message', resolved);\r\n        reject(err);\r\n      };\r\n\r\n      this\r\n        .once('message', resolved)\r\n        .once('error', rejected);\r\n    });\r\n  }\r\n\r\n  handleMessage(message) {\r\n    if (message.error) {\r\n      const error = new Error(message.error.message);\r\n      error.stack = message.error.stack;\r\n\r\n      this.handleError(error);\r\n    } else if (message.progress) {\r\n      this.handleProgress(message.progress);\r\n    } else {\r\n      this.emit('message', ...message.response);\r\n      this.emit('done', ...message.response);    // this one is just for convenience\r\n    }\r\n  }\r\n\r\n  handleProgress(progress) {\r\n    this.emit('progress', progress);\r\n  }\r\n\r\n  handleError(error) {\r\n    if (!this.listeners('error', true)) {\r\n      console.error(error.stack || error);       // eslint-disable-line no-console\r\n    }\r\n    this.emit('error', error);\r\n  }\r\n}\r\n"]}